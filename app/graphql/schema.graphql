type Faction {
  id: ID!
  models: [Model!]!
  name: String!
}

type Model {
  faction: Faction!
  id: ID!
  name: String!
  userModels: [UserModel!]!
}

type Mutation {
  signIn(
    """
    Parameters for SignIn
    """
    input: SignInInput!
  ): SignInPayload
  signUp(
    """
    Parameters for SignUp
    """
    input: SignUpInput!
  ): SignUpPayload
}

type Query {
  factions: [Faction!]!
  me: User!
  user(id: ID!): User
  users: [User!]!
}

"""
Autogenerated input type of SignIn
"""
input SignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  password: String!
  username: String!
}

"""
Autogenerated return type of SignIn.
"""
type SignInPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
Autogenerated input type of SignUp
"""
input SignUpInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
  username: String!
}

"""
Autogenerated return type of SignUp.
"""
type SignUpPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

type User {
  email: String!
  id: ID!
  userImageAssociations: [UserImageAssociation!]!
  userImages: [UserImage!]!
  userModels: [UserModel!]!
  username: String!
}

type UserImage {
  id: ID!
  url: String!
  user: User!
  userImageAssociations: [UserImageAssociation!]!
}

type UserImageAssociation {
  id: ID!
  user: User!
  userImage: UserImage!
  userModel: UserModel!
}

type UserModel {
  id: ID!
  model: Model!
  name: String
  quantity: Int!
  status: UserModelStatus!
  user: User!
  userImageAssociations: [UserImageAssociation!]!
}

enum UserModelStatus {
  ASSEMBLED
  FINISHED
  IN_PROGRESS
  UNASSEMBLED
}
